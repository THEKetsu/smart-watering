name: 🚀 CI/CD - Smart Watering

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1

jobs:
  # ===== TESTS BACKEND =====
  test-backend:
    name: 🧪 Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: smart_watering_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 📱 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'smart-watering-backend/package-lock.json'

      - name: 📥 Install dependencies
        working-directory: ./smart-watering-backend
        run: npm ci

      - name: 🔍 Lint code
        working-directory: ./smart-watering-backend
        run: npm run lint

      - name: 🏗️ Type check
        working-directory: ./smart-watering-backend
        run: npm run typecheck

      - name: 🧪 Run tests
        working-directory: ./smart-watering-backend
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: smart_watering_test
          DB_USER: postgres
          DB_PASSWORD: test_password
          JWT_SECRET: test-secret-for-ci
          OPENWEATHER_API_KEY: test-api-key
        run: npm test

  # ===== TESTS FRONTEND =====
  test-frontend:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 📱 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'smart-watering-frontend/package-lock.json'

      - name: 📥 Install dependencies
        working-directory: ./smart-watering-frontend
        run: npm ci

      - name: 🔍 Lint code
        working-directory: ./smart-watering-frontend
        run: npm run lint || echo "⚠️ Linting issues found (warnings allowed)"

      - name: 🏗️ Type check
        working-directory: ./smart-watering-frontend
        run: npm run typecheck || echo "⚠️ TypeScript errors found (but build continues)"

      - name: 🧪 Run tests
        working-directory: ./smart-watering-frontend
        env:
          CI: true
        run: npm run test:ci

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          directory: ./smart-watering-frontend/coverage
          flags: frontend
          name: frontend-coverage

  # ===== BUILD & SECURITY =====
  build-and-security:
    name: 🔒 Build & Security
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🔒 Run security audit
        run: |
          echo "🔍 Backend security audit:"
          cd smart-watering-backend && npm audit --audit-level=high || echo "⚠️ Backend audit found issues"
          echo "🔍 Frontend security audit:"
          cd ../smart-watering-frontend && npm audit --audit-level=high || echo "⚠️ Frontend audit found issues"

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build backend image
        uses: docker/build-push-action@v5
        with:
          context: ./smart-watering-backend
          push: false
          tags: smart-watering-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🏗️ Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./smart-watering-frontend
          push: false
          tags: smart-watering-frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ===== INTEGRATION TESTS =====
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [build-and-security]

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Create test environment
        run: |
          cp .env.test .env
          docker-compose -f docker-compose.yml up -d
          
      - name: ⏳ Wait for services
        run: |
          echo "Waiting for services to be ready..."
          sleep 30
          
      - name: 🔍 Health checks
        run: |
          # Test database
          docker-compose exec -T database pg_isready -U postgres -d smart_watering
          
          # Test backend API
          curl --retry 10 --retry-delay 3 --retry-connrefused http://localhost:3001/health
          
          # Test frontend
          curl --retry 10 --retry-delay 3 --retry-connrefused http://localhost:3000

      - name: 🧪 API Integration Tests
        run: |
          # Test plant creation
          curl -X POST http://localhost:3001/api/plants \
            -H "Content-Type: application/json" \
            -d '{"name":"CI Test Plant","type":"tropical","baseWateringFrequencyDays":7,"baseWaterAmountMl":250}' \
            --fail
            
          # Test weather endpoint
          curl http://localhost:3001/api/weather/current --fail

      - name: 🧹 Cleanup
        if: always()
        run: docker-compose down -v

  # ===== NOTIFICATIONS =====
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: always()

    steps:
      - name: ✅ Success notification
        if: needs.integration-tests.result == 'success'
        run: |
          echo "🎉 All tests passed! Ready for deployment."
          
      - name: ❌ Failure notification
        if: needs.integration-tests.result == 'failure'
        run: |
          echo "💥 Tests failed! Check the logs."
          exit 1