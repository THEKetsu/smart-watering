#!/bin/bash

# Smart Watering - Script de d√©ploiement
# Ce script automatise le d√©ploiement de l'application compl√®te

set -e  # Arr√™ter en cas d'erreur

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
APP_NAME="smart-watering"
COMPOSE_FILE="docker-compose.yml"
ENV_FILE=".env"

# Fonctions utilitaires
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# V√©rification des pr√©requis
check_prerequisites() {
    log_info "V√©rification des pr√©requis..."
    
    if ! command -v docker &> /dev/null; then
        log_error "Docker n'est pas install√©"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
        log_error "Docker Compose n'est pas install√©"
        exit 1
    fi
    
    if [ ! -f "$ENV_FILE" ]; then
        if [ -f ".env.example" ]; then
            log_warning "Fichier .env manquant, copie depuis .env.example"
            cp .env.example .env
            log_warning "‚ö†Ô∏è  Pensez √† configurer vos variables d'environnement dans .env"
        else
            log_error "Fichier .env requis"
            exit 1
        fi
    fi
    
    log_success "Pr√©requis valid√©s"
}

# Configuration de l'environnement
setup_environment() {
    log_info "Configuration de l'environnement..."
    
    # Cr√©er les dossiers n√©cessaires
    mkdir -p logs/{nginx,app}
    mkdir -p backups
    mkdir -p monitoring
    
    # V√©rifier la cl√© API m√©t√©o
    if ! grep -q "^OPENWEATHER_API_KEY=" .env || grep -q "your_openweather_api_key" .env; then
        log_warning "‚ö†Ô∏è  Cl√© API OpenWeatherMap non configur√©e"
        log_warning "Obtenez votre cl√© gratuite sur: https://openweathermap.org/api"
    fi
    
    log_success "Environnement configur√©"
}

# Construction des images
build_images() {
    log_info "Construction des images Docker..."
    
    if command -v docker-compose &> /dev/null; then
        docker-compose build --no-cache
    else
        docker compose build --no-cache
    fi
    
    log_success "Images construites avec succ√®s"
}

# D√©marrage des services
start_services() {
    local profile=${1:-""}
    log_info "D√©marrage des services..."
    
    if [ -n "$profile" ]; then
        log_info "Utilisation du profil: $profile"
        if command -v docker-compose &> /dev/null; then
            docker-compose --profile "$profile" up -d
        else
            docker compose --profile "$profile" up -d
        fi
    else
        if command -v docker-compose &> /dev/null; then
            docker-compose up -d
        else
            docker compose up -d
        fi
    fi
    
    log_success "Services d√©marr√©s"
}

# V√©rification de la sant√© des services
check_health() {
    log_info "V√©rification de la sant√© des services..."
    
    local max_attempts=30
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        log_info "Tentative $attempt/$max_attempts..."
        
        # V√©rifier la base de donn√©es
        if docker-compose exec -T database pg_isready -U postgres -d smart_watering > /dev/null 2>&1; then
            log_success "‚úÖ Base de donn√©es OK"
            break
        fi
        
        if [ $attempt -eq $max_attempts ]; then
            log_error "‚ùå Base de donn√©es non accessible apr√®s $max_attempts tentatives"
            return 1
        fi
        
        sleep 5
        ((attempt++))
    done
    
    # V√©rifier le backend
    attempt=1
    while [ $attempt -le $max_attempts ]; do
        if curl -f http://localhost:3001/health > /dev/null 2>&1; then
            log_success "‚úÖ Backend API OK"
            break
        fi
        
        if [ $attempt -eq $max_attempts ]; then
            log_error "‚ùå Backend API non accessible"
            return 1
        fi
        
        sleep 5
        ((attempt++))
    done
    
    # V√©rifier le frontend
    attempt=1
    while [ $attempt -le $max_attempts ]; do
        if curl -f http://localhost:3000/health > /dev/null 2>&1; then
            log_success "‚úÖ Frontend OK"
            break
        fi
        
        if [ $attempt -eq $max_attempts ]; then
            log_error "‚ùå Frontend non accessible"
            return 1
        fi
        
        sleep 5
        ((attempt++))
    done
    
    log_success "Tous les services sont op√©rationnels"
}

# Initialisation des donn√©es
initialize_data() {
    log_info "Initialisation des donn√©es..."
    
    # Attendre que le backend soit pr√™t
    sleep 10
    
    # Tenter de r√©cup√©rer les donn√©es m√©t√©o initiales
    if curl -f -X POST http://localhost:3001/api/weather/update > /dev/null 2>&1; then
        log_success "Donn√©es m√©t√©o initialis√©es"
    else
        log_warning "Impossible d'initialiser les donn√©es m√©t√©o (v√©rifiez la cl√© API)"
    fi
    
    log_success "Initialisation termin√©e"
}

# Affichage des informations de d√©ploiement
show_deployment_info() {
    echo ""
    log_success "üå± Smart Watering d√©ploy√© avec succ√®s!"
    echo ""
    echo "üìä URLs d'acc√®s:"
    echo "   ‚Ä¢ Frontend:     http://localhost:3000"
    echo "   ‚Ä¢ Backend API:  http://localhost:3001"
    echo "   ‚Ä¢ Base de donn√©es: localhost:5432"
    echo ""
    echo "üìù Informations utiles:"
    echo "   ‚Ä¢ Logs:         docker-compose logs -f [service]"
    echo "   ‚Ä¢ Arr√™t:        docker-compose down"
    echo "   ‚Ä¢ Red√©marrage:  docker-compose restart"
    echo "   ‚Ä¢ Sauvegarde:   ./scripts/backup.sh"
    echo ""
    
    if grep -q "your_openweather_api_key" .env 2>/dev/null; then
        log_warning "‚ö†Ô∏è  N'oubliez pas de configurer votre cl√© API OpenWeatherMap dans .env"
    fi
    
    echo "üéâ L'application est pr√™te √† l'emploi!"
}

# Nettoyage en cas d'erreur
cleanup_on_error() {
    log_error "Erreur d√©tect√©e, nettoyage en cours..."
    if command -v docker-compose &> /dev/null; then
        docker-compose down
    else
        docker compose down
    fi
    exit 1
}

# Fonction principale
main() {
    local command=${1:-"deploy"}
    local profile=${2:-""}
    
    # Gestionnaire d'erreur
    trap cleanup_on_error ERR
    
    echo "üå± Smart Watering - D√©ploiement automatis√©"
    echo "========================================"
    
    case $command in
        "deploy")
            check_prerequisites
            setup_environment
            build_images
            start_services "$profile"
            check_health
            initialize_data
            show_deployment_info
            ;;
        "start")
            start_services "$profile"
            log_success "Services red√©marr√©s"
            ;;
        "stop")
            log_info "Arr√™t des services..."
            if command -v docker-compose &> /dev/null; then
                docker-compose down
            else
                docker compose down
            fi
            log_success "Services arr√™t√©s"
            ;;
        "restart")
            log_info "Red√©marrage des services..."
            if command -v docker-compose &> /dev/null; then
                docker-compose restart
            else
                docker compose restart
            fi
            log_success "Services red√©marr√©s"
            ;;
        "logs")
            if command -v docker-compose &> /dev/null; then
                docker-compose logs -f
            else
                docker compose logs -f
            fi
            ;;
        "status")
            if command -v docker-compose &> /dev/null; then
                docker-compose ps
            else
                docker compose ps
            fi
            ;;
        "clean")
            log_warning "Suppression de tous les conteneurs et volumes..."
            read -p "√ätes-vous s√ªr? (y/N) " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                if command -v docker-compose &> /dev/null; then
                    docker-compose down -v
                else
                    docker compose down -v
                fi
                docker system prune -f
                log_success "Nettoyage termin√©"
            fi
            ;;
        "help"|*)
            echo "Usage: $0 [COMMAND] [PROFILE]"
            echo ""
            echo "Commands:"
            echo "  deploy     D√©ploiement complet (d√©faut)"
            echo "  start      D√©marrer les services"
            echo "  stop       Arr√™ter les services"
            echo "  restart    Red√©marrer les services"
            echo "  logs       Afficher les logs"
            echo "  status     Statut des services"
            echo "  clean      Nettoyage complet"
            echo "  help       Afficher cette aide"
            echo ""
            echo "Profiles (optionnel):"
            echo "  production Inclut nginx et SSL"
            echo "  monitoring Inclut Prometheus/Grafana"
            echo "  backup     Pour les sauvegardes"
            echo ""
            echo "Exemples:"
            echo "  $0 deploy production"
            echo "  $0 start monitoring"
            echo "  $0 logs"
            ;;
    esac
}

# Ex√©cution
main "$@"