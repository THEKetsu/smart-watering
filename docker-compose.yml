services:
  # Base de données PostgreSQL
  database:
    image: postgres:15-alpine
    container_name: smart-watering-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: smart_watering_2024
      POSTGRES_DB: smart_watering
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    networks:
      - smart-watering-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d smart_watering"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Backend API Node.js
  backend:
    build:
      context: ./smart-watering-backend
      dockerfile: Dockerfile
    container_name: smart-watering-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      
      # Base de données
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: smart_watering
      DB_USER: postgres
      DB_PASSWORD: smart_watering_2024
      
      # API Météo - À configurer avec votre clé
      OPENWEATHER_API_KEY: ${OPENWEATHER_API_KEY:-test-key}
      
      # Sécurité
      JWT_SECRET: ${JWT_SECRET:-smart_watering_jwt_secret_key_2024}
      JWT_EXPIRES_IN: 24h
      
      # CORS
      CORS_ORIGIN: http://localhost:3000
    volumes:
      - ./logs:/app/logs
    ports:
      - "3001:3001"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - smart-watering-network
    healthcheck:
      test: ["CMD", "node", "dist/healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React
  frontend:
    build:
      context: ./smart-watering-frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: http://localhost:3001/api
        REACT_APP_MOCK_MODE: "false"
    container_name: smart-watering-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - smart-watering-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Redis pour le cache (optionnel)
  redis:
    image: redis:7-alpine
    container_name: smart-watering-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-smart_watering_redis_2024}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - smart-watering-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx Reverse Proxy (optionnel pour production)
  nginx:
    image: nginx:alpine
    container_name: smart-watering-proxy
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    networks:
      - smart-watering-network
    profiles:
      - production

  # Backup service
  backup:
    image: postgres:15-alpine
    container_name: smart-watering-backup
    restart: "no"
    environment:
      PGPASSWORD: smart_watering_2024
    volumes:
      - ./backups:/backups
      - ./scripts:/scripts:ro
    depends_on:
      - database
    networks:
      - smart-watering-network
    command: /scripts/backup.sh
    profiles:
      - backup

  # Monitoring avec Prometheus (optionnel)
  prometheus:
    image: prom/prometheus:latest
    container_name: smart-watering-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - smart-watering-network
    profiles:
      - monitoring

  # Visualisation avec Grafana (optionnel)
  grafana:
    image: grafana/grafana:latest
    container_name: smart-watering-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-smart_watering_2024}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - smart-watering-network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  smart-watering-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16