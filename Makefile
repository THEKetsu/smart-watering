# Smart Watering - Makefile pour simplifier les commandes
# Usage: make [target]

.PHONY: help install dev build start stop restart logs status clean backup restore deploy

# Variables
COMPOSE_FILE = docker-compose.yml
ENV_FILE = .env

# Couleurs pour les messages
YELLOW := \033[1;33m
GREEN := \033[1;32m
RED := \033[1;31m
NC := \033[0m

# Target par d√©faut
help: ## Afficher l'aide
	@echo "$(YELLOW)üå± Smart Watering - Commandes disponibles$(NC)"
	@echo "============================================="
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(GREEN)%-15s$(NC) %s\n", $$1, $$2}'

install: ## Installer les d√©pendances et configurer l'environnement
	@echo "$(YELLOW)Installation et configuration...$(NC)"
	@if [ ! -f $(ENV_FILE) ]; then \
		cp .env.example $(ENV_FILE); \
		echo "$(YELLOW)‚ö†Ô∏è  Fichier .env cr√©√© depuis .env.example$(NC)"; \
		echo "$(YELLOW)‚ö†Ô∏è  Pensez √† configurer vos variables d'environnement$(NC)"; \
	fi
	@mkdir -p logs/{nginx,app} backups monitoring
	@chmod +x scripts/*.sh
	@echo "$(GREEN)‚úÖ Installation termin√©e$(NC)"

dev: ## D√©marrer en mode d√©veloppement
	@echo "$(YELLOW)D√©marrage en mode d√©veloppement...$(NC)"
	@cd smart-watering-backend && npm install && npm run dev &
	@cd smart-watering-frontend && npm install && npm start &
	@echo "$(GREEN)‚úÖ Mode d√©veloppement d√©marr√©$(NC)"
	@echo "Frontend: http://localhost:3000"
	@echo "Backend:  http://localhost:3001"

build: ## Construire les images Docker
	@echo "$(YELLOW)Construction des images Docker...$(NC)"
	@docker-compose build --no-cache
	@echo "$(GREEN)‚úÖ Images construites$(NC)"

start: ## D√©marrer tous les services
	@echo "$(YELLOW)D√©marrage des services...$(NC)"
	@docker-compose up -d
	@echo "$(GREEN)‚úÖ Services d√©marr√©s$(NC)"

stop: ## Arr√™ter tous les services
	@echo "$(YELLOW)Arr√™t des services...$(NC)"
	@docker-compose down
	@echo "$(GREEN)‚úÖ Services arr√™t√©s$(NC)"

restart: ## Red√©marrer tous les services
	@echo "$(YELLOW)Red√©marrage des services...$(NC)"
	@docker-compose restart
	@echo "$(GREEN)‚úÖ Services red√©marr√©s$(NC)"

logs: ## Afficher les logs de tous les services
	@docker-compose logs -f

logs-backend: ## Afficher les logs du backend uniquement
	@docker-compose logs -f backend

logs-frontend: ## Afficher les logs du frontend uniquement
	@docker-compose logs -f frontend

logs-db: ## Afficher les logs de la base de donn√©es
	@docker-compose logs -f database

status: ## Afficher le statut des services
	@docker-compose ps

clean: ## Nettoyer les conteneurs et volumes
	@echo "$(RED)‚ö†Ô∏è  Suppression de tous les conteneurs et volumes$(NC)"
	@read -p "√ätes-vous s√ªr? (y/N) " -n 1 -r; \
	echo; \
	if [ "$$REPLY" = "y" ] || [ "$$REPLY" = "Y" ]; then \
		docker-compose down -v; \
		docker system prune -f; \
		echo "$(GREEN)‚úÖ Nettoyage termin√©$(NC)"; \
	else \
		echo "Annul√©"; \
	fi

backup: ## Cr√©er une sauvegarde de la base de donn√©es
	@./scripts/backup.sh backup

restore: ## Restaurer la base de donn√©es (make restore FILE=backup.sql.gz)
	@if [ -z "$(FILE)" ]; then \
		echo "$(RED)‚ùå Sp√©cifiez le fichier: make restore FILE=backup.sql.gz$(NC)"; \
		./scripts/backup.sh list; \
	else \
		./scripts/backup.sh restore $(FILE); \
	fi

deploy: ## D√©ploiement complet (production)
	@./scripts/deploy.sh deploy

deploy-dev: ## D√©ploiement en d√©veloppement
	@./scripts/deploy.sh deploy

deploy-prod: ## D√©ploiement en production avec nginx
	@./scripts/deploy.sh deploy production

deploy-monitoring: ## D√©ploiement avec monitoring (Prometheus/Grafana)
	@./scripts/deploy.sh deploy monitoring

health: ## V√©rifier la sant√© des services
	@echo "$(YELLOW)V√©rification de la sant√© des services...$(NC)"
	@echo "Base de donn√©es:"
	@docker-compose exec database pg_isready -U postgres -d smart_watering || echo "‚ùå Base de donn√©es non accessible"
	@echo "Backend API:"
	@curl -f http://localhost:3001/health > /dev/null 2>&1 && echo "‚úÖ Backend OK" || echo "‚ùå Backend non accessible"
	@echo "Frontend:"
	@curl -f http://localhost:3000/health > /dev/null 2>&1 && echo "‚úÖ Frontend OK" || echo "‚ùå Frontend non accessible"

shell-backend: ## Ouvrir un shell dans le conteneur backend
	@docker-compose exec backend sh

shell-db: ## Ouvrir un shell dans la base de donn√©es
	@docker-compose exec database psql -U postgres -d smart_watering

test: ## Lancer les tests
	@echo "$(YELLOW)Lancement des tests...$(NC)"
	@cd smart-watering-backend && npm test
	@cd smart-watering-frontend && npm test -- --coverage --watchAll=false
	@echo "$(GREEN)‚úÖ Tests termin√©s$(NC)"

lint: ## V√©rifier le code (linting)
	@echo "$(YELLOW)V√©rification du code...$(NC)"
	@cd smart-watering-backend && npm run lint && npm run typecheck
	@cd smart-watering-frontend && npm run lint && npm run typecheck
	@echo "$(GREEN)‚úÖ Code v√©rifi√©$(NC)"

seed: ## Initialiser les donn√©es de test
	@echo "$(YELLOW)Initialisation des donn√©es de test...$(NC)"
	@curl -f -X POST http://localhost:3001/api/weather/update || echo "‚ö†Ô∏è  Impossible de r√©cup√©rer les donn√©es m√©t√©o"
	@echo "$(GREEN)‚úÖ Donn√©es initialis√©es$(NC)"

update: ## Mettre √† jour les images Docker
	@echo "$(YELLOW)Mise √† jour des images...$(NC)"
	@docker-compose pull
	@docker-compose build --no-cache
	@echo "$(GREEN)‚úÖ Images mises √† jour$(NC)"

# Raccourcis utiles
up: start ## Alias pour start
down: stop ## Alias pour stop
ps: status ## Alias pour status